function PseudoTimeTraj = quantify_pseudotime_from_python(procdir, all_trajectories, all_trajectories_edges, ProjStruct)
    
    
    % 1) Build the Python script
    python_path = update_python_paths();
    python_script = sprintf(['import numpy as np\n',...
        'from scipy.io import savemat, loadmat\n\n',...
        'def pseudo_time(root_node, point_index, traj, projval, edgeid, edges):\n',...
        '    # Compute single point pseudotime\n',...
        '    xi = int(point_index)\n',...
        '    proj_val_x = projval[xi]\n',...
        '    if proj_val_x < 0:\n',...
        '        proj_val_x = 0\n',...
        '    if proj_val_x > 1:\n',...
        '        proj_val_x = 1\n',...
        '    edgeid_x = int(edgeid[xi])\n',...
        '    traja = np.array(traj)\n',...
        '    i1 = 1000000\n',...
        '    i2 = 1000000\n',...
        '    # Only if both nodes of edges[edgeid_x] are in this trajectory\n',...
        '    if (edges[edgeid_x][0] in traja) and (edges[edgeid_x][1] in traja):\n',...
        '        i1 = np.where(traja==edges[edgeid_x][0])[0][0]\n',...
        '        i2 = np.where(traja==edges[edgeid_x][1])[0][0]\n',...
        '    i = min(i1,i2)\n',...
        '    if i==i1:\n',...
        '        pstime = i1 + proj_val_x\n',...
        '    else:\n',...
        '        pstime = i1 - proj_val_x\n',...
        '    return pstime\n\n',...
        'def pseudo_time_trajectory(traj_vertices, traj_edges, ProjStruct):\n',...
        '    # Extract arrays from ProjStruct\n',...
        '    projval = ProjStruct["ProjectionValues"].flatten()\n',...
        '    edgeid  = ProjStruct["EdgeID"].astype(int).flatten()\n',...
        '    edges   = ProjStruct["Edges"]\n',...
        '    # Gather all points that lie on the edges in this trajectory\n',...
        '    traj_points = np.array([], dtype=int)\n',...
        '    for e in traj_edges:\n',...
        '        points_on_edge = np.where(edgeid==e)[0]\n',...
        '        traj_points = np.concatenate((traj_points, points_on_edge))\n',...
        '    # Compute pseudotime for each point\n',...
        '    pst = np.zeros(len(traj_points))\n',...
        '    for i, pidx in enumerate(traj_points):\n',...
        '        pst[i] = pseudo_time(traj_vertices[0], pidx, traj_vertices,\n',...
        '                            projval, edgeid, edges)\n',...
        '    return pst, traj_points\n\n',...
        'def quantify_pseudotime(all_trajectories, all_trajectories_edges, ProjStruct):\n',...
        '    PseudoTimeTraj = []\n',...
        '    # Convert each row from MATLAB into a 1D array with negative trimmed\n',...
        '    trajectories = [row[row >= 0] for row in all_trajectories]\n',...
        '    edges_arr    = [row[row >= 0] for row in all_trajectories_edges]\n',...
        '    for i, (traj, traj_edges) in enumerate(zip(trajectories, edges_arr)):\n',...
        '        pst, points = pseudo_time_trajectory(traj, traj_edges, ProjStruct)\n',...
        '        # Store results in a dict\n',...
        '        pstt = {\n',...
        '            "Trajectory": traj.tolist(),\n',...
        '            "Trajectory_Edges": traj_edges.tolist(),\n',...
        '            "Points": points.tolist(),\n',...
        '            "Pseudotime": pst.tolist()\n',...
        '        }\n',...
        '        PseudoTimeTraj.append(pstt)\n',...
        '    return PseudoTimeTraj\n\n',...
        'def compute_pseudotime(input_file, output_file):\n',...
        '    data = loadmat(input_file)\n',...
        '    trajectories = data["trajectories"]\n',...
        '    edges_traj   = data["edges"]\n',...
        '    ProjStruct   = {\n',...
        '        "ProjectionValues": data["ProjectionValues"],\n',...
        '        "EdgeID": data["EdgeID"],\n',...
        '        "Edges": data["Edges"],\n',...
        '    }\n',...
        '    results = quantify_pseudotime(trajectories, edges_traj, ProjStruct)\n',...
        '    savemat(output_file, {"PseudoTimeTraj": results})\n\n',...
        'if __name__ == "__main__":\n',...
        '    import sys\n',...
        '    compute_pseudotime(sys.argv[1], sys.argv[2])\n']);
   
    script_file = fullfile(procdir,'temp_pseudotime.py');
    fid = fopen(script_file, 'w');
    fprintf(fid, '%s', python_script);
    fclose(fid);
   
    
    nTraj = length(all_trajectories);
    max_traj_len = max(cellfun(@numel, all_trajectories));
    max_edge_len = max(cellfun(@numel, all_trajectories_edges));
    traj_matrix = -ones(nTraj, max_traj_len);
    edge_matrix = -ones(nTraj, max_edge_len);
    for i = 1:nTraj
        % 'all_trajectories' is already 0-based
        traj_matrix(i,1:numel(all_trajectories{i})) = all_trajectories{i};
        % 'all_trajectories_edges' also 0-based
        edge_matrix(i,1:numel(all_trajectories_edges{i})) = all_trajectories_edges{i};
    end
   
    ProjectionValues = ProjStruct.ProjectionValues(:);
    EdgeID           = ProjStruct.EdgeID(:);
    EdgesGraph       = ProjStruct.Edges;
  
    trajectories = traj_matrix;
    edges        = edge_matrix;
    Edges        = EdgesGraph;
    input_file  = fullfile(procdir,'temp_pseudotime_input.mat');
    output_file = fullfile(procdir,'temp_pseudotime_output.mat');
    save(input_file, ...
         'trajectories', 'edges', ...
         'ProjectionValues', 'EdgeID', 'Edges', ...
         '-v7');
 
    % Execute Python script
    command = sprintf('"%s" "%s" "%s" "%s"', ...
    python_path, script_file, input_file, output_file);
    [status, commandOutput] = system(command);
    
    if status ~= 0
        fprintf('Python script failed with error:\n%s\n', commandOutput);
        error('Python script execution failed');
    end
    
    out = load(output_file);
    PseudoTimeTraj = out.PseudoTimeTraj;  % 1xN cell in MATLAB
    
   
    fprintf('\nDetailed Pseudotime Analysis (0-based):\n');
    fprintf('=========================================\n');
    for i = 1:length(PseudoTimeTraj)
        traj = PseudoTimeTraj{i};
        fprintf('Trajectory %d:\n', i);
        fprintf('  Path: Node %d -> Node %d (0-based)\n', ...
            min(traj.Trajectory), max(traj.Trajectory));
        fprintf('  Points: %d\n', length(traj.Points));
        fprintf('  Pseudotime Range: %.2f to %.2f\n', ...
            min(traj.Pseudotime), max(traj.Pseudotime));
        fprintf('  Mean Pseudotime: %.2f\n', mean(traj.Pseudotime));
        fprintf('  Median Pseudotime: %.2f\n', median(traj.Pseudotime));
        fprintf('---------------------------\n');
    end
    delete(input_file);
    delete(output_file);
    delete(script_file);
end
